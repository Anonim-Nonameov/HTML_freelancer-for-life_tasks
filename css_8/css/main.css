/*
На этот раз мы попрактикуемся со свойством position и его значениями, будем рассматривать интересные
моменты с этим свойством и много (ну..) чего другого, так что.. поехали! но для начала мы будем
стилизовать страницу, потому что серенькая и унылая страничка никому не нужна :) -
*/

body {
  padding: 30px;
  font-family: "Arial", Helvetica, sans-serif;
}

.block {
  border: 5px solid red;
  max-width: 800px;
  height: 800px;
  margin: 0px auto;
}

.block div {
  font-size: 18px;
  font-weight: bold;
  line-height: 50px;
  text-align: center;
}

.block__1 {
  background-color: #ece89d;
}
.block__2 {
  color: #fff;
  background-color: #5e5373;
}
.block__3 {
  background-color: #18b5a4;
}

.block__4 {
  background-color: #39a92f;
}

.block__5 {
  background-color: #ffaa01;
}

/*
Да это же самое настоящее ПРАИЗВИДИНИ ИСКУСТВА! а теперь перейдем к делу. Добавим position: sticky
и top: 0 одновременно блоку-2 и блоку-4, предварительно добавив position: relative и большую высоту
к нашему родительскому элементу, чтобы он буквально стал "коробкой" дочерних элементов и на сайте
появился огрооомный такой скролл:
*/

.block {
  position: relative;
  height: 1800px;
}

.block__2 {
  position: sticky;
  top: 0
}

.block__4 {
  position: sticky;
  top: 0;
}

/*
Если в данный момент войти в браузер и посмотреть что там да как, то ничего интересного там на
самом деле и нет: просто 5 блоков мирно себе сидят и никого не трогают, зато скролл есть. Так вот -
достаточно проскроллить страницу так, чтобы верхняя часть браузера касалась верха блока-2, как у
него сразу активизируется position: sticky и он прекращает быть обычным блоком с position: static,
теперь он крутой парень у которого значение свойства position стало равно fixed'у. Но мы проскроллим
еще дальше и удивимся - как только верхняя часть браузера касается верха блока-4, как он сразу же
прилипает к верхней части окна браузера и уже ОН несет эстафету. То есть - сначала зафиксировался
блок-2, а потом блок-4. Из-за этого может показаться, что блок-2 возвращается на своё место и он
перестает быть фиксированным, но отнюдь - он просто перекрывается блоком-4 (это можно проверить
при помощи DTools - увеличиваем top у блока-4 при скролле).

Идем дальше. На самом деле, мы должны были практиковаться, но немного теории тоже не помешает. В чем 
"опасность" использования свойства position со значением absolute? Казалось бы, всё в верстке очень
просто - используешь position: absolute и разместил всё именно там, где надо и всё по дизайну, да
и дело с концом... но к сожалению или к счастью, мы живем в не статическом мире, а в мире браузеров,
электроники с разными размерами экранов, где разная и изменяющаяся информация. И вот именно поэтому
необходимо использовать как само позиционирование, так и фиксированное, липкое и особенно абсолютное
надо использовать с крайней осторожностью - надо помнить, что они вырываются из потока и не влияют
на никакие другие блоки. Покажу это на примере. Нам понадобятся два блока из пяти, поэтому я просто
возьму и закомментирую ненужные три (-3, -4, -5) блока, а блоку-1 и блоку-2 я укажу position со  
значением  absolute, также блоку-1 я задам top со значением 0 и left со значением 0, блоку-2 я задам
всё то же самое, но left я заменю на right, а также обоим блокам я задам ограничение по ширине в 50
процентов. Позиционироваться они будут относительно div'а с классом block, поэтому ему я ничего не 
задам и ничего не отниму, а стили для блоков 2 и 4 я обнулю: 
*/

.block__2,
.block__4 {
  position: static; /* обнуляшки!! */
  top: auto; /* обнуляшки!! */
}

.block__1 {
  width: 50%;
  position: absolute;
  top: 0;
  left: 0;
}

.block__2 {
  width: 50%;
  position: absolute;
  top: 0;
  right: 0;
}

/*
Прекрасно, таким образом у нас появились две замечательные колонки. Но что, если под этими двумя 
блоками появится еще один блок с неким содержимым? если его расскоментировать, то на сайте ничего и 
не произойдет, и сейчас я покажу вам, почему. Добавляем блоку-3 pos: relative и больший z-index:
*/

.block__3 {
  position: relative;
  z-index: 3;
}

/*
Заходим в браузер и видим, что появился крупный (на всю ширину родителя) блок, это блок-3. Он был
под двумя нашими абсолютными блоками. Напоминаю, что блоки к которым применено свойство position
со значением absolute ВЫРЫВАЮТСЯ из потока, поэтому очень сложно строить какую структуру, особенно
если она динамическая. Достаточно хаотично добавить и убавить у каких-то блоков текста и посмотреть
на происхоядщее. Всё ломается, колонки больше не ровные, изначальный блок БОЛЬШЕ чем другие и вообще
всё очень и очень плохо. Поэтому нельзя строить структуру страницы на абсолютном позиционировании,
особенно когда секций на сайте очень много. Структура должна быть выстроена в статических блоках,
и как именно - узнаем в следующих уроках о структуре, FLEX'ах, Grid'ах и так далее, но об этом пока
что рановато. Сейчас я только предупреждаю, что нельзя злоупотреблять абсолютным позиционированием
и использовать только там, где оно действительно нужно. В далнейшем мы будем (в том или мном формате)
решать какие-то задачи и я буду (Жека будет, а я перезапишу сюда :D) показывать, как и где нам надо
использовать абсолютное позиционирование. На этом, кажется, с теорией покончено. Время практики!

Я создал список в index.html и хочу его стилизовать, так как сидеть со скучным и простым списком - не
круто и не красиво. А также я обнулю всё то, что проделал ДО этого, оставив изначальную стилизацию
блоков (мало ли, захотите расскоментировать блоки (они сейчас закомментированы) и попрактиковаться):
*/

.block {
  position: static; /* обнуляшки!! */
  height: 800px; /* обнуляшки!! */
}

.block__1,
.block__2,
.block__3 {
  position: static; /* обнуляшки!! */
  width: auto; /* обнуляшки!! */
  top: auto; /* обнуляшки!! */
  left: auto; /* обнуляшки!! */
  right: auto; /* обнуляшки!! */
  z-index: 0; /* обнуляшки!! */
}

.list {
  font-size: 18px;
}

.list li {
  margin: 0 0 10px 0;
}

/*
Прекрасно, теперь я хочу как-то стилизировать элементы списка. В предыдущих уроках мы делали это
используя свойство background и п-классы/элементы . Сейчас я "скрещу" всё это в один гибрид (смешаю 
background и п-классы/элементы) и, вдобавок ко всему, использую позционирование: 
*/

.list li {
  position: relative;
  padding: 0 0 0 30px;
}
 
.list li::before {
  content: "";
  width: 20px;
  height: 20px;
  background: url(../img/icons/li.svg) 0 0 no-repeat;
  position: absolute;
  top: 4px;
  left: 0;
}

/*
Великолепие! шедевр! пунктам мы добавили pos: relative, чтобы фоновое изображение (которое еще и
абсолютно спозионированно) выравнивалась СТРОГО относительно своего родителя. Далее я просто создаю
п-элемент, задаю ему физ. размеры, добавляю фон. изображение, абсолютно его позиционирую и сдвигаю
его сверху на 4 пикселя и слева на 0 (чтобы слева он вообще не сдвигался). И даже если добавить к
какому нибудь элементу очень много текста, поведение фон. изображения не изменится, оно всегда
будет стоять там, где ему велено. Достигается это путем добавления к самим элементам паддингов.
Но тут (опять немного теории) возникает резонный вопрос - почему нельзя просто использовать само
свойство background и не облегчить себе жизнь и код, ведь кода стало больше? а ответ прост - бывают
случаи, когда нам нужно так или иначе анимировать или видоизменять что-либо при наведении, либо при
каких-то других действиях, и не всегда это можно сделать (ну, анимировать) именно background, и
именно поэтому применяется п-элемент как отдельный тег, его абсолютно позиционируют, применяют к
нему свойство background и делают с ним всё, что угодно. Такой способ позволяет достаточно гибко и,
я бы даже сказал МАКСИМАЛЬНО гибко работать с тем или иным элементом.

А на этом всё! домашнее задание в папке "Домашка" :)
*/